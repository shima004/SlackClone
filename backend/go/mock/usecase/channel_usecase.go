// Code generated by MockGen. DO NOT EDIT.
// Source: channel_usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/shima004/slackclone/model"
)

// MockChannelUsecase is a mock of ChannelUsecase interface.
type MockChannelUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockChannelUsecaseMockRecorder
}

// MockChannelUsecaseMockRecorder is the mock recorder for MockChannelUsecase.
type MockChannelUsecaseMockRecorder struct {
	mock *MockChannelUsecase
}

// NewMockChannelUsecase creates a new mock instance.
func NewMockChannelUsecase(ctrl *gomock.Controller) *MockChannelUsecase {
	mock := &MockChannelUsecase{ctrl: ctrl}
	mock.recorder = &MockChannelUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelUsecase) EXPECT() *MockChannelUsecaseMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockChannelUsecase) CreateChannel(ctx context.Context, channel *model.Channel) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, channel)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChannelUsecaseMockRecorder) CreateChannel(ctx, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelUsecase)(nil).CreateChannel), ctx, channel)
}

// DeleteChannel mocks base method.
func (m *MockChannelUsecase) DeleteChannel(ctx context.Context, channelID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChannelUsecaseMockRecorder) DeleteChannel(ctx, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelUsecase)(nil).DeleteChannel), ctx, channelID)
}
